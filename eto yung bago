package project;

import java.awt.*;
import javax.swing.*;
import java.util.ArrayList;
import javax.swing.border.EmptyBorder;

public class ToDoListApp extends JFrame {
    private TaskList urgentTaskList = new TaskList(); 
    private TaskList notUrgentTaskList = new TaskList(); 

    public ToDoListApp() {
        setTitle("To-Do List");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel taskPanel = new JPanel(new GridLayout(1, 2, 20, 20)); 

        // Urgent tasks panel
        ImagePanel urgentPanel = new ImagePanel("C:\\Users\\Maymay\\Downloads\\download (3).jpg");
        urgentPanel.setLayout(new BorderLayout());
        JLabel urgentLabel = new JLabel("Important and Urgent", JLabel.CENTER);
        urgentLabel.setFont(new Font("Serif", Font.BOLD, 16));
        urgentLabel.setForeground(Color.BLACK);

        ListPanel urgentListPanel = new ListPanel(urgentTaskList); 
        urgentPanel.add(urgentLabel, BorderLayout.NORTH);
        urgentPanel.add(urgentListPanel, BorderLayout.CENTER);
        urgentPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2)); 
        urgentPanel.setBorder(new EmptyBorder(20, 20, 20, 20)); 

        // Not urgent tasks panel
        ImagePanel notUrgentPanel = new ImagePanel("C:\\Users\\Maymay\\Downloads\\download (2).jpg"); 
        notUrgentPanel.setLayout(new BorderLayout());
        JLabel notUrgentLabel = new JLabel("Important but Not Urgent", JLabel.CENTER);
        notUrgentLabel.setFont(new Font("Serif", Font.BOLD, 16));
        notUrgentLabel.setForeground(Color.WHITE);

        ListPanel notUrgentListPanel = new ListPanel(notUrgentTaskList); 
        notUrgentPanel.add(notUrgentLabel, BorderLayout.NORTH);
        notUrgentPanel.add(notUrgentListPanel, BorderLayout.CENTER);
        notUrgentPanel.setBorder(BorderFactory.createLineBorder(Color.MAGENTA, 2)); 
        notUrgentPanel.setBorder(new EmptyBorder(20, 20, 20, 20)); 

        taskPanel.add(urgentPanel);
        taskPanel.add(notUrgentPanel);

        add(taskPanel, BorderLayout.CENTER);
        Footer footer = new Footer(urgentListPanel, notUrgentListPanel); 
        add(footer, BorderLayout.SOUTH);

        setVisible(true);
    }

    static class ImagePanel extends JPanel {
        private Image backgroundImage;

        public ImagePanel(String imagePath) {
            this.backgroundImage = new ImageIcon(imagePath).getImage(); 
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this); 
        }
    }

    static class Task extends JPanel {
        JLabel index;
        JTextField taskName;
        JButton done, delete;
        boolean checked = false;
        Color taskBgColor = new Color(245, 222, 179); 
        Color completedColor = new Color(200, 200, 200); 
        Dimension buttonSize = new Dimension(80, 30); 
        ListPanel parentPanel; 

        Task(int num, ListPanel parentPanel) {
            this.parentPanel = parentPanel; 
            this.setLayout(new BorderLayout());
            this.setBackground(taskBgColor); 

            index = new JLabel(num + "  ");
            index.setFont(new Font("Serif", Font.PLAIN, 14));
            this.add(index, BorderLayout.WEST);

            taskName = new JTextField("Write something..");
            taskName.setFont(new Font("Serif", Font.PLAIN, 14));
            this.add(taskName, BorderLayout.CENTER);

            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));

            done = new JButton("✔");
            done.setFont(new Font("SansSerif", Font.BOLD, 12));
            done.setBackground(Color.BLACK); 
            done.setForeground(Color.WHITE); 
            done.setPreferredSize(buttonSize);
            buttonPanel.add(done);

            delete = new JButton("✘");
            delete.setFont(new Font("SansSerif", Font.BOLD, 12));
            delete.setBackground(Color.BLACK); 
            delete.setForeground(Color.WHITE); 
            delete.setPreferredSize(buttonSize);
            buttonPanel.add(delete);

            this.add(buttonPanel, BorderLayout.EAST);

            // Action listener for "✔" button
            done.addActionListener(e -> {
                if (!checked) {
                    changeState(); 
                    parentPanel.updateCounts(); 
                }
            });

            // Action listener for "✘" button
            delete.addActionListener(e -> {
                parentPanel.taskList.removeTask(this); 
                parentPanel.updateDisplay(); 
            });
        }

        public void changeState() {
            this.setBackground(completedColor); 
            taskName.setBackground(completedColor);
            taskName.setFont(new Font("Serif", Font.ITALIC, 14));
            taskName.setForeground(Color.GRAY); 
            checked = true;
        }

        public boolean isChecked() {
            return checked;
        }
    }

    static class TaskList {
        private ArrayList<Task> tasks;

        TaskList() {
            tasks = new ArrayList<>();
        }

        public void addTask(Task task) {
            tasks.add(task);
        }

        public void removeTask(Task task) {
            tasks.remove(task);
        }

        public ArrayList<Task> getTasks() {
            return tasks;
        }

        public int getSize() {
            return tasks.size();
        }

        public int getCompletedCount() {
            int count = 0;
            for (Task task : tasks) {
                if (task.isChecked()) {
                    count++;
                }
            }
            return count;
        }

        public void clearAllTasks() {
            tasks.clear();
        }
    }

    static class ListPanel extends JPanel {
        TaskList taskList;
        JLabel completedCountLabel, uncompletedCountLabel;

        ListPanel(TaskList taskList) {
            this.taskList = taskList;
            setLayout(new GridLayout(12, 1, 0, 5)); 
            setBackground(new Color(200,200,200)); 

            completedCountLabel = new JLabel("Completed: 0");
            uncompletedCountLabel = new JLabel("Uncompleted: " + taskList.getSize());
            add(completedCountLabel);
            add(uncompletedCountLabel);
        }

        public void updateDisplay() {
            removeAll();
            add(completedCountLabel);
            add(uncompletedCountLabel);
            for (int i = 1; i <= taskList.getSize(); i++) { // Start from 1
                Task task = taskList.getTasks().get(i - 1);
                add(task);
            }
            revalidate();
            repaint();
            updateCounts();
        }

        public void removeCompletedTasks() {
            ArrayList<Task> completedTasks = new ArrayList<>();
            for (Task task : taskList.getTasks()) {
                if (task.isChecked()) {
                    completedTasks.add(task);
                }
            }
            for (Task task : completedTasks) {
                taskList.removeTask(task);
            }
            updateDisplay();
        }

        public void updateCounts() {
            int completedCount = taskList.getCompletedCount();
            int uncompletedCount = taskList.getSize() - completedCount;
            completedCountLabel.setText("Completed: " + completedCount);
            uncompletedCountLabel.setText("Uncompleted: " + uncompletedCount);
        }

        public void removeAllTasks() {
            taskList.clearAllTasks();
            updateDisplay();
        }
    }

    static class Footer extends JPanel {
        JButton addTaskUrgent = new JButton("Add Urgent Task"), 
                addTaskNotUrgent = new JButton("Add Not Urgent Task"), 
                clear = new JButton("Clear finished tasks"), 
                clearAll = new JButton("Remove All Tasks");

        private ListPanel urgentListPanel;
        private ListPanel notUrgentListPanel;

        Footer(ListPanel urgentListPanel, ListPanel notUrgentListPanel) {
            this.urgentListPanel = urgentListPanel; 
            this.notUrgentListPanel = notUrgentListPanel; 

            setLayout(new FlowLayout());
            setOpaque(false);

            addTaskUrgent.setBackground(Color.BLACK);
            addTaskUrgent.setForeground(Color.WHITE);
            addTaskNotUrgent.setBackground(Color.BLACK);
            addTaskNotUrgent.setForeground(Color.WHITE);
            clearAll.setBackground(Color.BLACK);
            clearAll.setForeground(Color.WHITE);
            clear.setBackground(Color.BLACK);
            clear.setForeground(Color.WHITE); 

            // Add action listeners
            addTaskUrgent.addActionListener(e -> {
                Task newTask = new Task(urgentListPanel.taskList.getSize() + 1, urgentListPanel); 
                urgentListPanel.taskList.addTask(newTask);
                urgentListPanel.updateDisplay();
            });

            addTaskNotUrgent.addActionListener(e -> {
                Task newTask = new Task(notUrgentListPanel.taskList.getSize() + 1, notUrgentListPanel); 
                notUrgentListPanel.taskList.addTask(newTask);
                notUrgentListPanel.updateDisplay();
            });

            clear.addActionListener(e -> {
                urgentListPanel.removeCompletedTasks();  
                notUrgentListPanel.removeCompletedTasks();  
            });

            clearAll.addActionListener(e -> {
                urgentListPanel.removeAllTasks();
                notUrgentListPanel.removeAllTasks();
            });

            add(addTaskUrgent);
            add(addTaskNotUrgent);
            add(clear);
            add(clearAll);
        }
    }

    public static void main(String[] args) {
        new ToDoListApp();
    }
}
